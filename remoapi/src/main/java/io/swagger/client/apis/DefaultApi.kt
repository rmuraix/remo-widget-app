/**
 * Nature API
 * Read/Write Nature Remo
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.Appliance
import io.swagger.client.models.ApplianceModelAndParam
import io.swagger.client.models.Devices
import io.swagger.client.models.Signal
import io.swagger.client.models.User

import io.swagger.client.infrastructure.*

class DefaultApi(basePath: kotlin.String = "https://api.nature.global/") : ApiClient(basePath) {

    /**
     * 
     * Reorder appliances.
     * @param appliances  
     * @return void
     */
    fun ApplianceOrdersPost(appliances: kotlin.String): Unit {
        val localVariableBody: kotlin.Any? = mapOf("appliances" to "$appliances")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/1/appliance_orders", headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Update air conditioner settings.
     * @param appliance Appliance ID. 
     * @param temperature  (optional)
     * @param operationMode  (optional)
     * @param airVolume  (optional)
     * @param airDirection  (optional)
     * @param button  (optional)
     * @return void
     */
    fun AppliancesApplianceAirconSettingsPost(appliance: kotlin.String, temperature: kotlin.String? = null, operationMode: kotlin.String? = null, airVolume: kotlin.String? = null, airDirection: kotlin.String? = null, button: kotlin.String? = null): Unit {
        val localVariableBody: kotlin.Any? = mapOf("temperature" to "$temperature", "operation_mode" to "$operationMode", "air_volume" to "$airVolume", "air_direction" to "$airDirection", "button" to "$button")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/1/appliances/{appliance}/aircon_settings".replace("{" + "appliance" + "}", "$appliance"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Delete appliance.
     * @param appliance Appliance ID. 
     * @return void
     */
    fun AppliancesApplianceDeletePost(appliance: kotlin.String): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/1/appliances/{appliance}/delete".replace("{" + "appliance" + "}", "$appliance")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Send light infrared signal.
     * @param button  
     * @param appliance Appliance ID. 
     * @return void
     */
    fun AppliancesApplianceLightPost(button: kotlin.String, appliance: kotlin.String): Unit {
        val localVariableBody: kotlin.Any? = mapOf("button" to "$button")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/1/appliances/{appliance}/light".replace("{" + "appliance" + "}", "$appliance"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Update appliance.
     * @param image  
     * @param nickname  
     * @param appliance Appliance ID. 
     * @return Appliance
     */
    @Suppress("UNCHECKED_CAST")
    fun AppliancesAppliancePost(image: kotlin.String, nickname: kotlin.String, appliance: kotlin.String): Appliance {
        val localVariableBody: kotlin.Any? = mapOf("image" to "$image", "nickname" to "$nickname")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/1/appliances/{appliance}".replace("{" + "appliance" + "}", "$appliance"), headers = localVariableHeaders
        )
        val response = request<Appliance>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Appliance
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Reorder signals under this appliance.
     * @param signals  
     * @param appliance Appliance ID. 
     * @return void
     */
    fun AppliancesApplianceSignalOrdersPost(signals: kotlin.String, appliance: kotlin.String): Unit {
        val localVariableBody: kotlin.Any? = mapOf("signals" to "$signals")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/1/appliances/{appliance}/signal_orders".replace("{" + "appliance" + "}", "$appliance"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Fetch signals registered under this appliance.
     * @param appliance Appliance ID. 
     * @return kotlin.Array<Signal>
     */
    @Suppress("UNCHECKED_CAST")
    fun AppliancesApplianceSignalsGet(appliance: kotlin.String): kotlin.Array<Signal> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/1/appliances/{appliance}/signals".replace("{" + "appliance" + "}", "$appliance")
        )
        val response = request<kotlin.Array<Signal>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Signal>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Create a signal under this appliance.
     * @param message  
     * @param image  
     * @param name  
     * @param appliance Appliance ID. 
     * @return Signal
     */
    @Suppress("UNCHECKED_CAST")
    fun AppliancesApplianceSignalsPost(message: kotlin.String, image: kotlin.String, name: kotlin.String, appliance: kotlin.String): Signal {
        val localVariableBody: kotlin.Any? = mapOf("message" to "$message", "image" to "$image", "name" to "$name")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/1/appliances/{appliance}/signals".replace("{" + "appliance" + "}", "$appliance"), headers = localVariableHeaders
        )
        val response = request<Signal>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Signal
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Send tv infrared signal.
     * @param button  
     * @param appliance Appliance ID. 
     * @return void
     */
    fun AppliancesApplianceTvPost(button: kotlin.String, appliance: kotlin.String): Unit {
        val localVariableBody: kotlin.Any? = mapOf("button" to "$button")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/1/appliances/{appliance}/tv".replace("{" + "appliance" + "}", "$appliance"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Fetch the list of appliances.
     * @return kotlin.Array<Appliance>
     */
    @Suppress("UNCHECKED_CAST")
    fun AppliancesGet(): kotlin.Array<Appliance> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/1/appliances"
        )
        val response = request<kotlin.Array<Appliance>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Appliance>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Create a new appliance.
     * @param nickname  
     * @param model  
     * @param modelType  
     * @param device  
     * @param image  
     * @return Appliance
     */
    @Suppress("UNCHECKED_CAST")
    fun AppliancesPost(nickname: kotlin.String, model: kotlin.String, modelType: kotlin.String, device: kotlin.String, image: kotlin.String): Appliance {
        val localVariableBody: kotlin.Any? = mapOf("nickname" to "$nickname", "model" to "$model", "model_type" to "$modelType", "device" to "$device", "image" to "$image")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/1/appliances", headers = localVariableHeaders
        )
        val response = request<Appliance>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Appliance
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Find the air conditioner best matching the provided infrared signal.
     * @param message  
     * @return kotlin.Array<ApplianceModelAndParam>
     */
    @Suppress("UNCHECKED_CAST")
    fun DetectappliancePost(message: kotlin.String): kotlin.Array<ApplianceModelAndParam> {
        val localVariableBody: kotlin.Any? = mapOf("message" to "$message")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/1/detectappliance", headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ApplianceModelAndParam>>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ApplianceModelAndParam>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Delete Remo.
     * @param device Device ID. 
     * @return void
     */
    fun DevicesDeviceDeletePost(device: kotlin.String): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/1/devices/{device}/delete".replace("{" + "device" + "}", "$device")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Update humidity offset.
     * @param offset  
     * @param device Device ID. 
     * @return void
     */
    fun DevicesDeviceHumidityOffsetPost(offset: kotlin.Int, device: kotlin.String): Unit {
        val localVariableBody: kotlin.Any? = mapOf("offset" to "$offset")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/1/devices/{device}/humidity_offset".replace("{" + "device" + "}", "$device"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Update Remo
     * @param name  
     * @param device Device ID. 
     * @return void
     */
    fun DevicesDevicePost(name: kotlin.String, device: kotlin.String): Unit {
        val localVariableBody: kotlin.Any? = mapOf("name" to "$name")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/1/devices/{device}".replace("{" + "device" + "}", "$device"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Update temperature offset.
     * @param offset  
     * @param device Device ID. 
     * @return void
     */
    fun DevicesDeviceTemperatureOffsetPost(offset: kotlin.Int, device: kotlin.String): Unit {
        val localVariableBody: kotlin.Any? = mapOf("offset" to "$offset")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/1/devices/{device}/temperature_offset".replace("{" + "device" + "}", "$device"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Fetch the list of Remo devices the user has access to.
     * @return Devices
     */
    @Suppress("UNCHECKED_CAST")
    fun DevicesGet(): Devices {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/1/devices"
        )
        val response = request<Devices>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Devices
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Delete an infrared signal.
     * @param signal Signal ID. 
     * @return void
     */
    fun SignalsSignalDeletePost(signal: kotlin.String): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/1/signals/{signal}/delete".replace("{" + "signal" + "}", "$signal")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Update infrared signal.
     * @param image  
     * @param name  
     * @param signal Signal ID. 
     * @return void
     */
    fun SignalsSignalPost(image: kotlin.String, name: kotlin.String, signal: kotlin.String): Unit {
        val localVariableBody: kotlin.Any? = mapOf("image" to "$image", "name" to "$name")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/1/signals/{signal}".replace("{" + "signal" + "}", "$signal"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Send infrared signal.
     * @param signal Signal ID. 
     * @return void
     */
    fun SignalsSignalSendPost(signal: kotlin.String): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/1/signals/{signal}/send".replace("{" + "signal" + "}", "$signal")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Fetch the authenticated user&#x27;s information.
     * @return User
     */
    @Suppress("UNCHECKED_CAST")
    fun UsersMeGet(): User {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/1/users/me"
        )
        val response = request<User>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as User
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Update authenticated user&#x27;s information.
     * @param nickname  
     * @return User
     */
    @Suppress("UNCHECKED_CAST")
    fun UsersMePost(nickname: kotlin.String): User {
        val localVariableBody: kotlin.Any? = mapOf("nickname" to "$nickname")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/1/users/me", headers = localVariableHeaders
        )
        val response = request<User>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as User
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
